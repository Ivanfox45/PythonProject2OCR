
# y0__xDcirSgqveAAhjB3RMg69yB-ROiJgcc6EUOSHCTjlfOBUBzXPo3Kw

import os
import base64
import requests
from pdf2image import convert_from_path
from docx import Document
import time


# === –ù–ê–°–¢–†–û–ô –≠–¢–ò –ü–ê–†–ê–ú–ï–¢–†–´ ===
IAM_TOKEN = 't1.9euelZqOlpqUzsvLncqPnZiUmc2Nze3rnpWak56XzsaWzZGJnpSMxorMzJPl8_cEO2E7-e8NLSh1_d3z90RpXjv57w0tKHX9zef1656Vmoqdx8vMns2OnYyJmpfKy4vO7_zF656Vmoqdx8vMns2OnYyJmpfKy4vO.ohCeytxtRHRJHNDl63No-kqf2bt-SrWuLuB6q6SZaK4OTIiMNtnSqJVKagsBRmJ0MiheUNs3ev50Vk8Y7ZPNCQ'
FOLDER_ID = 'b1gejpaoh25hcp76j3f5'
PDF_PATH = r'C:\Users\ivan_\PycharmProjects\PythonProject2\–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–≤–µ—â–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥. –ü–ß–£ –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥-—Ä–∞–∑–±.pdf'

TMP_IMG_DIR = 'ocr_pages'
OUTPUT_DOCX = 'ocr_result.docx'

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ===
os.makedirs(TMP_IMG_DIR, exist_ok=True)

# === –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PDF ‚Üí PNG –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º ===
pages = convert_from_path(PDF_PATH, dpi=200)
image_paths = []
for i, page in enumerate(pages):
    img_path = os.path.join(TMP_IMG_DIR, f'page_{i+1}.png')
    page.save(img_path, 'PNG')
    image_paths.append(img_path)

# === –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å PNG —á–µ—Ä–µ–∑ Vision ===
def ocr_image(path, max_retries=5):
    with open(path, 'rb') as f:
        img_base64 = base64.b64encode(f.read()).decode('utf-8')

    url = 'https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze'
    headers = {
        'Authorization': f'Bearer {IAM_TOKEN}',
        'Content-Type': 'application/json'
    }
    payload = {
        "folderId": FOLDER_ID,
        "analyze_specs": [{
            "content": img_base64,
            "features": [{
                "type": "TEXT_DETECTION",
                "text_detection_config": {
                    "language_codes": ["ru"]
                }
            }]
        }]
    }

    delay = 101
    for attempt in range(max_retries):
        resp = requests.post(url, headers=headers, json=payload)

        if resp.status_code == 429:
            print(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª 429 (Too Many Requests), –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}. –ñ–¥—É {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            delay *= 2  # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            continue

        if resp.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {resp.status_code}")
            return f"[–æ—à–∏–±–∫–∞ {resp.status_code}]"

        time.sleep(2)  # –±–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞
        break

    # === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ===
    result = resp.json()
    text = ''
    try:
        pages = result['results'][0]['results'][0]['textDetection']['pages']
        for page in pages:
            for block in page.get('blocks', []):
                for line in block.get('lines', []):
                    words = [word.get('text', '') for word in line.get('words', [])]
                    text += ' '.join(words) + '\n'
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        return "[–æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞]"
    return text.strip()

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º ===
doc = Document()
for i, path in enumerate(image_paths):
    print(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(image_paths)}...")
    text = ocr_image(path)
    doc.add_heading(f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}', level=2)
    if text:
        for line in text.splitlines():
            doc.add_paragraph(line)
    else:
        doc.add_paragraph("[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]")

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ===
doc.save(OUTPUT_DOCX)
print(f"\n‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {OUTPUT_DOCX}")

# === –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===
for p in image_paths:
    os.remove(p)
os.rmdir(TMP_IMG_DIR)
